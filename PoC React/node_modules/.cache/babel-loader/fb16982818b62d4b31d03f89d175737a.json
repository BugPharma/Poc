{"ast":null,"code":"import * as d3 from 'd3';\nexport let arrayFinale;\nlet checkbox = []; //----------------------ELABORAZIONE MANUALE----------------------\n\n/*\nfunction buttonElaborate(){\n  const input = document.getElementById(\"csvFile\");\n  const file = input.files[0];\n  document.querySelector(\"#bottone-input-druid\").style.display = \"none\";\n\n  const reader = new FileReader();\n\n  reader.onload = function (e) {\n    const text = e.target.result;//stringa con tutto il risultato del file CSV\n    const data = csvToArray(text);\n    arrayFinale = transformArray(data);\n    manipulationDom();\n  };\n\n  reader.readAsText(file);\n}\n\n //----------------------ELABORAZIONE AI CON DRUID----------------------\nfunction buttonElaborateDruid(){\n  const input = document.getElementById(\"csvFile\");\n  const file = input.files[0];\n\n  const reader = new FileReader();\n\n  reader.onload = function (e) {\n    const text = e.target.result;//stringa con tutto il risultato del file CSV\n    const data = csvToArray(text);\n    druid(data);\n  };\n\n  reader.readAsText(file);\n}\n\n*/\n\nfunction isNumeric(n) {\n  return !isNaN(n);\n} // per fare qualcosa ai dati numerici\n\n\nexport function transformArray(data) {\n  data.forEach((elt, index) => {\n    // scorre le righe\n    if (index != 0) {\n      // salta la prima riga con le etichette\n      Array.from(elt).forEach((elt2, index2) => {\n        // scorre le colonne\n        if (isNumeric(elt2)) {\n          data[index][index2] = Number(elt2); //che cacchio serve?\n        }\n      });\n    }\n  });\n  return data;\n}\nexport function manipulationDom(data) {\n  document.querySelector(\"#bottone_elab\").style.display = \"none\"; //toglie il bottone per elaborare\n\n  console.log(\"prova1\");\n  console.log(Object.keys(data[1]).length);\n\n  for (var i = 0; i < data[1].length; i++) {\n    console.log(\"prova2\");\n  }\n\n  Array.from(data[1]).forEach((elt, index) => {\n    if (isNumeric(elt)) {\n      checkbox.push(data[0][index]);\n    }\n  }); //creare i checkbox\n  //createCheckBox(checkbox);\n  //fine();\n}\n\nfunction createCheckBox(checkbox) {\n  var parentElement = document.querySelector('#myForm');\n  let counter = 0;\n  let spazio = document.createElement('br');\n\n  for (var count in checkbox) {\n    var newCheckBox = document.createElement('input');\n    newCheckBox.type = 'checkbox';\n    newCheckBox.id = 'check' + count; // need unique Ids!\n\n    let spazio = document.createElement('br');\n    var newLabel = document.createElement('label');\n    newLabel.innerHTML = checkbox[count];\n    parentElement.appendChild(spazio);\n    parentElement.appendChild(newCheckBox);\n    parentElement.appendChild(newLabel);\n    counter++;\n  }\n\n  parentElement.appendChild(spazio);\n  var newButton = document.createElement('button');\n  newButton.innerHTML = \"Calcola\";\n  newButton.id = \"bottoneCalcoloFinale\";\n  newButton.classList.add(\"button\");\n  newButton.style.marginTop = \"10px\";\n  newButton.type = \"button\";\n  parentElement.appendChild(newButton);\n} // toglie la prima riga \n\n\nfunction trasformaArray(array) {\n  let headers = array.shift();\n  let arrayModificato = array.map(function (row) {\n    const el = headers.reduce(function (object, header, index) {\n      object[header] = row[index];\n      return object;\n    }, {});\n    return el;\n  });\n  return arrayModificato;\n}\n\nfunction fine() {\n  let arrayBoolean = [];\n  let cordX;\n  let cordY;\n  let x;\n  let y;\n\n  document.querySelector(\"#bottoneCalcoloFinale\").onclick = function () {\n    //controlla i 2 check\n    checkbox.forEach((elt, index) => {\n      arrayBoolean.push(document.querySelector(`#check${index}`).checked);\n    });\n    arrayBoolean.forEach((elt, index) => {\n      if (elt == true) {\n        if (cordX == undefined) {\n          cordX = index;\n        } else {\n          cordY = index;\n        }\n      }\n    });\n    let x = checkbox[cordX];\n    let y = checkbox[cordY];\n    arrayFinale[0].forEach((elt, index) => {\n      if (elt == x) {\n        cordX = index;\n      }\n\n      if (elt == y) {\n        cordY = index;\n      }\n    });\n    dataForD3(cordX, cordY, x, y);\n  };\n\n  function dataForD3(x, y, nameX, nameY) {\n    console.log(\"aa\", arrayFinale);\n    arrayFinale = deleteEmpty(arrayFinale);\n    let arrayD3 = [];\n    arrayFinale.forEach((elt, index) => {\n      let arrayTemp = [];\n      arrayTemp.push(arrayFinale[index][cordX]);\n      arrayTemp.push(arrayFinale[index][cordY]);\n      arrayD3.push(arrayTemp);\n    });\n    arrayD3 = trasformaArray(arrayD3);\n    console.log(arrayD3);\n    d3Construct(arrayD3, nameX, nameY);\n  }\n}\n\nfunction deleteEmpty(array) {\n  let localArray = [];\n  array.forEach((item, i) => {\n    if (item == 0) {} else {\n      localArray.push(item);\n    }\n  });\n  return localArray;\n} //--------------------------------------------DRUID-------------------------------------------------------------------\n\n\nfunction druid(data) {\n  data = transformArray(data);\n  data = trasformaArray(data);\n  data.pop(); //SISTEMARE\n\n  const attrs = Object.keys(data[0]).filter(a => {\n    console.log(typeof data[0][a]);\n    return typeof data[0][a] === \"number\";\n  });\n  const maxes = attrs.map(a => {\n    return d3.max(data, d => d[a]);\n  });\n  console.log(maxes);\n  let a = data.map(d => attrs.map((a, i) => d[a] / maxes[i]));\n  console.log(\"a\", a);\n  let projection = new druid.PCA(a).transform(); //transformate in 2 colonne\n\n  projection = formatArray(projection);\n  console.log(\"pro\", projection);\n  d3Construct(projection, \"x\", \"y\");\n}\n\nfunction formatArray(projection) {\n  let headers = [\"x\", \"y\"];\n  let arrayModificato = projection.map(function (row) {\n    const el = headers.reduce(function (object, header, index) {\n      object[header] = row[index];\n      return object;\n    }, {});\n    return el;\n  });\n  return arrayModificato;\n}\n\nfunction min(data, nameX) {\n  let min = data[0][nameX];\n  data.forEach((item, i) => {\n    if (item[nameX] < min) {\n      min = item[nameX];\n    }\n  });\n  console.log(min);\n  return min;\n}\n\nfunction max(data, nameX) {\n  let max = data[0][nameX];\n  data.forEach((item, i) => {\n    if (item[nameX] > max) {\n      max = item[nameX];\n    }\n  });\n  console.log(max);\n  return max;\n} //--------------------------------------------D3, PLOT CSV-------------------------------------------------------------------\n\n\nfunction d3Construct(data, nameX, nameY) {\n  console.log(\"data\", data);\n  console.log(\"x\", nameX);\n  console.log(\"y\", nameY);\n  document.querySelector(\"#contenitoreForm\").style.display = \"none\";\n  document.querySelector(\"#my_dataviz\").style.display = \"block\";\n  const margin = {\n    top: 10,\n    right: 30,\n    bottom: 30,\n    left: 60\n  },\n        width = 460 - margin.left - margin.right,\n        height = 400 - margin.top - margin.bottom; // append the svg object to the body of the page\n\n  const svg = d3.select(\"#my_dataviz\").append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", `translate(${margin.left}, ${margin.top})`);\n  create(); //Read the data\n\n  function create() {\n    // Add X axis\n    const x = d3.scaleLinear().domain([min(data, nameX), max(data, nameX)]).range([0, width]);\n    svg.append(\"g\").attr(\"transform\", `translate(0, ${height})`).call(d3.axisBottom(x)); // Add Y axis\n\n    const y = d3.scaleLinear().domain([min(data, nameY), max(data, nameY)]).range([height, 0]);\n    svg.append(\"g\").call(d3.axisLeft(y)); // Add dots\n\n    svg.append('g').selectAll(\"dot\").data(data).join(\"circle\").attr(\"cx\", function (d) {\n      return x(d[nameX]);\n    }).attr(\"cy\", function (d) {\n      return y(d[nameY]);\n    }).attr(\"r\", 3.5).style(\"fill\", \"#69b3a2\");\n  }\n}","map":{"version":3,"sources":["/home/nicla/Scrivania/SWE/prova/src/control.js"],"names":["d3","arrayFinale","checkbox","isNumeric","n","isNaN","transformArray","data","forEach","elt","index","Array","from","elt2","index2","Number","manipulationDom","document","querySelector","style","display","console","log","Object","keys","length","i","push","createCheckBox","parentElement","counter","spazio","createElement","count","newCheckBox","type","id","newLabel","innerHTML","appendChild","newButton","classList","add","marginTop","trasformaArray","array","headers","shift","arrayModificato","map","row","el","reduce","object","header","fine","arrayBoolean","cordX","cordY","x","y","onclick","checked","undefined","dataForD3","nameX","nameY","deleteEmpty","arrayD3","arrayTemp","d3Construct","localArray","item","druid","pop","attrs","filter","a","maxes","max","d","projection","PCA","transform","formatArray","min","margin","top","right","bottom","left","width","height","svg","select","append","attr","create","scaleLinear","domain","range","call","axisBottom","axisLeft","selectAll","join"],"mappings":"AAAA,OAAO,KAAKA,EAAZ,MAAoB,IAApB;AAEE,OAAO,IAAIC,WAAJ;AACP,IAAIC,QAAQ,GAAG,EAAf,C,CAKA;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGE,SAASC,SAAT,CAAmBC,CAAnB,EAAsB;AAAE,SAAO,CAACC,KAAK,CAACD,CAAD,CAAb;AAAmB,C,CAE3C;;;AACA,OAAO,SAASE,cAAT,CAAwBC,IAAxB,EAA6B;AAClCA,EAAAA,IAAI,CAACC,OAAL,CAAa,CAACC,GAAD,EAAMC,KAAN,KAAe;AAAE;AAC5B,QAAGA,KAAK,IAAI,CAAZ,EAAc;AAAE;AACdC,MAAAA,KAAK,CAACC,IAAN,CAAWH,GAAX,EAAgBD,OAAhB,CAAwB,CAACK,IAAD,EAAMC,MAAN,KAAgB;AAAE;AACxC,YAAGX,SAAS,CAACU,IAAD,CAAZ,EAAmB;AACjBN,UAAAA,IAAI,CAACG,KAAD,CAAJ,CAAYI,MAAZ,IAAsBC,MAAM,CAACF,IAAD,CAA5B,CADiB,CACmB;AACrC;AACF,OAJD;AAKD;AACF,GARD;AASA,SAAON,IAAP;AACD;AAGD,OAAO,SAASS,eAAT,CAAyBT,IAAzB,EAA8B;AAEnCU,EAAAA,QAAQ,CAACC,aAAT,CAAuB,eAAvB,EAAwCC,KAAxC,CAA8CC,OAA9C,GAAwD,MAAxD,CAFmC,CAE6B;;AAChEC,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYC,MAAM,CAACC,IAAP,CAAYjB,IAAI,CAAC,CAAD,CAAhB,EAAqBkB,MAAjC;;AAEA,OAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACnB,IAAI,CAAC,CAAD,CAAJ,CAAQkB,MAAvB,EAA+BC,CAAC,EAAhC,EAAoC;AAClCL,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACD;;AAGDX,EAAAA,KAAK,CAACC,IAAN,CAAWL,IAAI,CAAC,CAAD,CAAf,EAAoBC,OAApB,CAA4B,CAACC,GAAD,EAAMC,KAAN,KAAe;AAEzC,QAAGP,SAAS,CAACM,GAAD,CAAZ,EAAkB;AAChBP,MAAAA,QAAQ,CAACyB,IAAT,CAAcpB,IAAI,CAAC,CAAD,CAAJ,CAAQG,KAAR,CAAd;AACD;AACF,GALD,EAXmC,CAoBnC;AACA;AAEA;AACD;;AAED,SAASkB,cAAT,CAAwB1B,QAAxB,EAAiC;AAE/B,MAAI2B,aAAa,GAAGZ,QAAQ,CAACC,aAAT,CAAuB,SAAvB,CAApB;AACA,MAAIY,OAAO,GAAG,CAAd;AACA,MAAIC,MAAM,GAAGd,QAAQ,CAACe,aAAT,CAAuB,IAAvB,CAAb;;AAEA,OAAI,IAAIC,KAAR,IAAiB/B,QAAjB,EACA;AACE,QAAIgC,WAAW,GAAGjB,QAAQ,CAACe,aAAT,CAAuB,OAAvB,CAAlB;AACAE,IAAAA,WAAW,CAACC,IAAZ,GAAmB,UAAnB;AACAD,IAAAA,WAAW,CAACE,EAAZ,GAAiB,UAAUH,KAA3B,CAHF,CAGoC;;AAElC,QAAIF,MAAM,GAAGd,QAAQ,CAACe,aAAT,CAAuB,IAAvB,CAAb;AAEA,QAAIK,QAAQ,GAAGpB,QAAQ,CAACe,aAAT,CAAuB,OAAvB,CAAf;AACAK,IAAAA,QAAQ,CAACC,SAAT,GAAqBpC,QAAQ,CAAC+B,KAAD,CAA7B;AAEAJ,IAAAA,aAAa,CAACU,WAAd,CAA0BR,MAA1B;AACAF,IAAAA,aAAa,CAACU,WAAd,CAA0BL,WAA1B;AACAL,IAAAA,aAAa,CAACU,WAAd,CAA0BF,QAA1B;AACAP,IAAAA,OAAO;AACR;;AAEDD,EAAAA,aAAa,CAACU,WAAd,CAA0BR,MAA1B;AACA,MAAIS,SAAS,GAAGvB,QAAQ,CAACe,aAAT,CAAuB,QAAvB,CAAhB;AACAQ,EAAAA,SAAS,CAACF,SAAV,GAAsB,SAAtB;AACAE,EAAAA,SAAS,CAACJ,EAAV,GAAe,sBAAf;AACAI,EAAAA,SAAS,CAACC,SAAV,CAAoBC,GAApB,CAAwB,QAAxB;AACAF,EAAAA,SAAS,CAACrB,KAAV,CAAgBwB,SAAhB,GAA4B,MAA5B;AACAH,EAAAA,SAAS,CAACL,IAAV,GAAiB,QAAjB;AACAN,EAAAA,aAAa,CAACU,WAAd,CAA0BC,SAA1B;AACD,C,CAED;;;AACA,SAASI,cAAT,CAAwBC,KAAxB,EAA8B;AAC5B,MAAIC,OAAO,GAAGD,KAAK,CAACE,KAAN,EAAd;AACA,MAAIC,eAAe,GAAGH,KAAK,CAACI,GAAN,CAAU,UAAUC,GAAV,EAAe;AAC7C,UAAMC,EAAE,GAAGL,OAAO,CAACM,MAAR,CAAe,UAAUC,MAAV,EAAkBC,MAAlB,EAA0B5C,KAA1B,EAAiC;AACzD2C,MAAAA,MAAM,CAACC,MAAD,CAAN,GAAiBJ,GAAG,CAACxC,KAAD,CAApB;AACA,aAAO2C,MAAP;AACD,KAHU,EAGR,EAHQ,CAAX;AAIA,WAAOF,EAAP;AACD,GANqB,CAAtB;AAOA,SAAOH,eAAP;AACD;;AAED,SAASO,IAAT,GAAe;AACb,MAAIC,YAAY,GAAG,EAAnB;AACA,MAAIC,KAAJ;AAAU,MAAIC,KAAJ;AACV,MAAIC,CAAJ;AAAM,MAAIC,CAAJ;;AACN3C,EAAAA,QAAQ,CAACC,aAAT,CAAuB,uBAAvB,EAAgD2C,OAAhD,GAA0D,YAAU;AAClE;AACA3D,IAAAA,QAAQ,CAACM,OAAT,CAAiB,CAACC,GAAD,EAAMC,KAAN,KAAc;AAC7B8C,MAAAA,YAAY,CAAC7B,IAAb,CAAmBV,QAAQ,CAACC,aAAT,CAAwB,SAAQR,KAAM,EAAtC,EAAyCoD,OAA5D;AACD,KAFD;AAGAN,IAAAA,YAAY,CAAChD,OAAb,CAAqB,CAACC,GAAD,EAAMC,KAAN,KAAc;AACjC,UAAGD,GAAG,IAAI,IAAV,EAAe;AACb,YAAGgD,KAAK,IAAIM,SAAZ,EAAsB;AACpBN,UAAAA,KAAK,GAAG/C,KAAR;AACD,SAFD,MAGI;AACFgD,UAAAA,KAAK,GAAGhD,KAAR;AACD;AACF;AACF,KATD;AAUA,QAAIiD,CAAC,GAAGzD,QAAQ,CAACuD,KAAD,CAAhB;AACA,QAAIG,CAAC,GAAG1D,QAAQ,CAACwD,KAAD,CAAhB;AACAzD,IAAAA,WAAW,CAAC,CAAD,CAAX,CAAeO,OAAf,CAAuB,CAACC,GAAD,EAAMC,KAAN,KAAc;AACnC,UAAGD,GAAG,IAAIkD,CAAV,EAAY;AACVF,QAAAA,KAAK,GAAG/C,KAAR;AACD;;AACD,UAAGD,GAAG,IAAImD,CAAV,EAAY;AACVF,QAAAA,KAAK,GAAGhD,KAAR;AACD;AACF,KAPD;AAQAsD,IAAAA,SAAS,CAACP,KAAD,EAAQC,KAAR,EAAeC,CAAf,EAAkBC,CAAlB,CAAT;AACD,GA1BD;;AA6BA,WAASI,SAAT,CAAmBL,CAAnB,EAAsBC,CAAtB,EAAyBK,KAAzB,EAAgCC,KAAhC,EAAsC;AACpC7C,IAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ,EAAiBrB,WAAjB;AACAA,IAAAA,WAAW,GAAGkE,WAAW,CAAClE,WAAD,CAAzB;AACA,QAAImE,OAAO,GAAG,EAAd;AACAnE,IAAAA,WAAW,CAACO,OAAZ,CAAoB,CAACC,GAAD,EAAMC,KAAN,KAAe;AACjC,UAAI2D,SAAS,GAAG,EAAhB;AACAA,MAAAA,SAAS,CAAC1C,IAAV,CAAe1B,WAAW,CAACS,KAAD,CAAX,CAAmB+C,KAAnB,CAAf;AACAY,MAAAA,SAAS,CAAC1C,IAAV,CAAe1B,WAAW,CAACS,KAAD,CAAX,CAAmBgD,KAAnB,CAAf;AACAU,MAAAA,OAAO,CAACzC,IAAR,CAAa0C,SAAb;AACD,KALD;AAMAD,IAAAA,OAAO,GAAGxB,cAAc,CAACwB,OAAD,CAAxB;AACA/C,IAAAA,OAAO,CAACC,GAAR,CAAY8C,OAAZ;AACAE,IAAAA,WAAW,CAACF,OAAD,EAAUH,KAAV,EAAiBC,KAAjB,CAAX;AACD;AAGF;;AAED,SAASC,WAAT,CAAqBtB,KAArB,EAA2B;AACzB,MAAI0B,UAAU,GAAG,EAAjB;AACA1B,EAAAA,KAAK,CAACrC,OAAN,CAAc,CAACgE,IAAD,EAAO9C,CAAP,KAAa;AACzB,QAAG8C,IAAI,IAAI,CAAX,EAAc,CAAE,CAAhB,MACK;AACHD,MAAAA,UAAU,CAAC5C,IAAX,CAAgB6C,IAAhB;AACD;AACF,GALD;AAMA,SAAOD,UAAP;AACD,C,CAID;;;AAEA,SAASE,KAAT,CAAelE,IAAf,EAAoB;AAClBA,EAAAA,IAAI,GAAGD,cAAc,CAACC,IAAD,CAArB;AACAA,EAAAA,IAAI,GAAGqC,cAAc,CAACrC,IAAD,CAArB;AACAA,EAAAA,IAAI,CAACmE,GAAL,GAHkB,CAGP;;AACX,QAAMC,KAAK,GAAGpD,MAAM,CAACC,IAAP,CAAYjB,IAAI,CAAC,CAAD,CAAhB,EAAqBqE,MAArB,CACZC,CAAC,IAAI;AACHxD,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAOf,IAAI,CAAC,CAAD,CAAJ,CAAQsE,CAAR,CAAnB;AACA,WAAQ,OAAOtE,IAAI,CAAC,CAAD,CAAJ,CAAQsE,CAAR,CAAP,KAAsB,QAA9B;AACD,GAJW,CAAd;AAMA,QAAMC,KAAK,GAAGH,KAAK,CAAC1B,GAAN,CAAU4B,CAAC,IAAI;AAC3B,WAAO7E,EAAE,CAAC+E,GAAH,CAAOxE,IAAP,EAAayE,CAAC,IAAIA,CAAC,CAACH,CAAD,CAAnB,CAAP;AACD,GAFa,CAAd;AAIAxD,EAAAA,OAAO,CAACC,GAAR,CAAYwD,KAAZ;AAEA,MAAID,CAAC,GAAGtE,IAAI,CAAC0C,GAAL,CAAS+B,CAAC,IAAIL,KAAK,CAAC1B,GAAN,CAAU,CAAC4B,CAAD,EAAInD,CAAJ,KAAUsD,CAAC,CAACH,CAAD,CAAD,GAAOC,KAAK,CAACpD,CAAD,CAAhC,CAAd,CAAR;AACAL,EAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ,EAAgBuD,CAAhB;AAEA,MAAII,UAAU,GAAG,IAAIR,KAAK,CAACS,GAAV,CAAcL,CAAd,EAAiBM,SAAjB,EAAjB,CAnBkB,CAmB4B;;AAG9CF,EAAAA,UAAU,GAAGG,WAAW,CAACH,UAAD,CAAxB;AACA5D,EAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAkB2D,UAAlB;AACAX,EAAAA,WAAW,CAACW,UAAD,EAAa,GAAb,EAAkB,GAAlB,CAAX;AACD;;AAED,SAASG,WAAT,CAAqBH,UAArB,EAAgC;AAC5B,MAAInC,OAAO,GAAG,CAAC,GAAD,EAAM,GAAN,CAAd;AACA,MAAIE,eAAe,GAAGiC,UAAU,CAAChC,GAAX,CAAe,UAAUC,GAAV,EAAe;AAClD,UAAMC,EAAE,GAAGL,OAAO,CAACM,MAAR,CAAe,UAAUC,MAAV,EAAkBC,MAAlB,EAA0B5C,KAA1B,EAAiC;AACzD2C,MAAAA,MAAM,CAACC,MAAD,CAAN,GAAiBJ,GAAG,CAACxC,KAAD,CAApB;AACA,aAAO2C,MAAP;AACD,KAHU,EAGR,EAHQ,CAAX;AAIA,WAAOF,EAAP;AACD,GANqB,CAAtB;AAOA,SAAOH,eAAP;AACD;;AAEH,SAASqC,GAAT,CAAa9E,IAAb,EAAmB0D,KAAnB,EAAyB;AACvB,MAAIoB,GAAG,GAAG9E,IAAI,CAAC,CAAD,CAAJ,CAAQ0D,KAAR,CAAV;AACA1D,EAAAA,IAAI,CAACC,OAAL,CAAa,CAACgE,IAAD,EAAO9C,CAAP,KAAa;AACxB,QAAG8C,IAAI,CAACP,KAAD,CAAJ,GAAcoB,GAAjB,EAAqB;AACnBA,MAAAA,GAAG,GAAGb,IAAI,CAACP,KAAD,CAAV;AACD;AACF,GAJD;AAKA5C,EAAAA,OAAO,CAACC,GAAR,CAAY+D,GAAZ;AACA,SAAOA,GAAP;AACD;;AAED,SAASN,GAAT,CAAaxE,IAAb,EAAmB0D,KAAnB,EAAyB;AACvB,MAAIc,GAAG,GAAGxE,IAAI,CAAC,CAAD,CAAJ,CAAQ0D,KAAR,CAAV;AACA1D,EAAAA,IAAI,CAACC,OAAL,CAAa,CAACgE,IAAD,EAAO9C,CAAP,KAAa;AACxB,QAAG8C,IAAI,CAACP,KAAD,CAAJ,GAAcc,GAAjB,EAAqB;AACnBA,MAAAA,GAAG,GAAGP,IAAI,CAACP,KAAD,CAAV;AACD;AACF,GAJD;AAKA5C,EAAAA,OAAO,CAACC,GAAR,CAAYyD,GAAZ;AACA,SAAOA,GAAP;AACD,C,CAGD;;;AAGA,SAAST,WAAT,CAAqB/D,IAArB,EAA2B0D,KAA3B,EAAkCC,KAAlC,EAAwC;AAEtC7C,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBf,IAApB;AACAc,EAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ,EAAiB2C,KAAjB;AACA5C,EAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ,EAAiB4C,KAAjB;AAEAjD,EAAAA,QAAQ,CAACC,aAAT,CAAuB,kBAAvB,EAA2CC,KAA3C,CAAiDC,OAAjD,GAA2D,MAA3D;AACAH,EAAAA,QAAQ,CAACC,aAAT,CAAuB,aAAvB,EAAsCC,KAAtC,CAA4CC,OAA5C,GAAsD,OAAtD;AAGA,QAAMkE,MAAM,GAAG;AAACC,IAAAA,GAAG,EAAE,EAAN;AAAUC,IAAAA,KAAK,EAAE,EAAjB;AAAqBC,IAAAA,MAAM,EAAE,EAA7B;AAAiCC,IAAAA,IAAI,EAAE;AAAvC,GAAf;AAAA,QACAC,KAAK,GAAG,MAAML,MAAM,CAACI,IAAb,GAAoBJ,MAAM,CAACE,KADnC;AAAA,QAEAI,MAAM,GAAG,MAAMN,MAAM,CAACC,GAAb,GAAmBD,MAAM,CAACG,MAFnC,CAVsC,CActC;;AACA,QAAMI,GAAG,GAAG7F,EAAE,CAAC8F,MAAH,CAAU,aAAV,EACXC,MADW,CACJ,KADI,EAEXC,IAFW,CAEN,OAFM,EAEGL,KAAK,GAAGL,MAAM,CAACI,IAAf,GAAsBJ,MAAM,CAACE,KAFhC,EAGXQ,IAHW,CAGN,QAHM,EAGIJ,MAAM,GAAGN,MAAM,CAACC,GAAhB,GAAsBD,MAAM,CAACG,MAHjC,EAIXM,MAJW,CAIJ,GAJI,EAKXC,IALW,CAKN,WALM,EAKQ,aAAYV,MAAM,CAACI,IAAK,KAAIJ,MAAM,CAACC,GAAI,GAL/C,CAAZ;AAOAU,EAAAA,MAAM,GAtBgC,CAuBtC;;AACA,WAASA,MAAT,GAAiB;AAEf;AACA,UAAMtC,CAAC,GAAG3D,EAAE,CAACkG,WAAH,GACTC,MADS,CACF,CAACd,GAAG,CAAC9E,IAAD,EAAO0D,KAAP,CAAJ,EAAmBc,GAAG,CAACxE,IAAD,EAAO0D,KAAP,CAAtB,CADE,EAETmC,KAFS,CAEH,CAAE,CAAF,EAAKT,KAAL,CAFG,CAAV;AAGAE,IAAAA,GAAG,CAACE,MAAJ,CAAW,GAAX,EACCC,IADD,CACM,WADN,EACoB,gBAAeJ,MAAO,GAD1C,EAECS,IAFD,CAEMrG,EAAE,CAACsG,UAAH,CAAc3C,CAAd,CAFN,EANe,CAUf;;AACA,UAAMC,CAAC,GAAG5D,EAAE,CAACkG,WAAH,GACTC,MADS,CACF,CAACd,GAAG,CAAC9E,IAAD,EAAO2D,KAAP,CAAJ,EAAmBa,GAAG,CAACxE,IAAD,EAAO2D,KAAP,CAAtB,CADE,EAETkC,KAFS,CAEH,CAAER,MAAF,EAAU,CAAV,CAFG,CAAV;AAGAC,IAAAA,GAAG,CAACE,MAAJ,CAAW,GAAX,EACCM,IADD,CACMrG,EAAE,CAACuG,QAAH,CAAY3C,CAAZ,CADN,EAde,CAiBf;;AACAiC,IAAAA,GAAG,CAACE,MAAJ,CAAW,GAAX,EACCS,SADD,CACW,KADX,EAECjG,IAFD,CAEMA,IAFN,EAGCkG,IAHD,CAGM,QAHN,EAICT,IAJD,CAIM,IAJN,EAIY,UAAUhB,CAAV,EAAa;AAAE,aAAOrB,CAAC,CAACqB,CAAC,CAACf,KAAD,CAAF,CAAR;AAAqB,KAJhD,EAKC+B,IALD,CAKM,IALN,EAKY,UAAUhB,CAAV,EAAa;AAAE,aAAOpB,CAAC,CAACoB,CAAC,CAACd,KAAD,CAAF,CAAR;AAAqB,KALhD,EAMC8B,IAND,CAMM,GANN,EAMW,GANX,EAOC7E,KAPD,CAOO,MAPP,EAOe,SAPf;AASD;AACF","sourcesContent":["import * as d3 from 'd3';\n\n  export let arrayFinale;\n  let checkbox = [];\n  \n\n  \n  \n  //----------------------ELABORAZIONE MANUALE----------------------\n  /*\n  function buttonElaborate(){\n    const input = document.getElementById(\"csvFile\");\n    const file = input.files[0];\n    document.querySelector(\"#bottone-input-druid\").style.display = \"none\";\n  \n    const reader = new FileReader();\n  \n    reader.onload = function (e) {\n      const text = e.target.result;//stringa con tutto il risultato del file CSV\n      const data = csvToArray(text);\n      arrayFinale = transformArray(data);\n      manipulationDom();\n    };\n  \n    reader.readAsText(file);\n  }\n  \n\n  //----------------------ELABORAZIONE AI CON DRUID----------------------\n  function buttonElaborateDruid(){\n    const input = document.getElementById(\"csvFile\");\n    const file = input.files[0];\n  \n    const reader = new FileReader();\n  \n    reader.onload = function (e) {\n      const text = e.target.result;//stringa con tutto il risultato del file CSV\n      const data = csvToArray(text);\n      druid(data);\n    };\n  \n    reader.readAsText(file);\n  }\n  \n */\n  \n  function isNumeric(n) { return !isNaN(n); }\n  \n  // per fare qualcosa ai dati numerici\n  export function transformArray(data){\n    data.forEach((elt, index) =>{ // scorre le righe\n      if(index != 0){ // salta la prima riga con le etichette\n        Array.from(elt).forEach((elt2,index2) =>{ // scorre le colonne\n          if(isNumeric(elt2)){\n            data[index][index2] = Number(elt2); //che cacchio serve?\n          }\n        });\n      }\n    });\n    return data;\n  }\n  \n  \n  export function manipulationDom(data){\n  \n    document.querySelector(\"#bottone_elab\").style.display = \"none\"; //toglie il bottone per elaborare\n    console.log(\"prova1\");\n    console.log(Object.keys(data[1]).length);\n\n    for(var i=0; i<data[1].length; i++) {\n      console.log(\"prova2\");\n    }\n\n\n    Array.from(data[1]).forEach((elt, index) =>{\n      \n      if(isNumeric(elt)){\n        checkbox.push(data[0][index]);\n      }\n    });\n\n    \n  \n    //creare i checkbox\n    //createCheckBox(checkbox);\n  \n    //fine();\n  }\n  \n  function createCheckBox(checkbox){\n  \n    var parentElement = document.querySelector('#myForm');\n    let counter = 0;\n    let spazio = document.createElement('br');\n  \n    for(var count in checkbox)\n    {\n      var newCheckBox = document.createElement('input');\n      newCheckBox.type = 'checkbox';\n      newCheckBox.id = 'check' + count; // need unique Ids!\n  \n      let spazio = document.createElement('br');\n  \n      var newLabel = document.createElement('label');\n      newLabel.innerHTML = checkbox[count];\n  \n      parentElement.appendChild(spazio);\n      parentElement.appendChild(newCheckBox);\n      parentElement.appendChild(newLabel);\n      counter++;\n    }\n  \n    parentElement.appendChild(spazio);\n    var newButton = document.createElement('button');\n    newButton.innerHTML = \"Calcola\";\n    newButton.id = \"bottoneCalcoloFinale\";\n    newButton.classList.add(\"button\");\n    newButton.style.marginTop = \"10px\";\n    newButton.type = \"button\";\n    parentElement.appendChild(newButton);\n  }\n  \n  // toglie la prima riga \n  function trasformaArray(array){\n    let headers = array.shift();\n    let arrayModificato = array.map(function (row) {\n      const el = headers.reduce(function (object, header, index) {\n        object[header] = row[index];\n        return object;\n      }, {});\n      return el;\n    });\n    return arrayModificato;\n  }\n  \n  function fine(){\n    let arrayBoolean = [];\n    let cordX;let cordY;\n    let x;let y;\n    document.querySelector(\"#bottoneCalcoloFinale\").onclick = function(){\n      //controlla i 2 check\n      checkbox.forEach((elt, index)=>{\n        arrayBoolean.push((document.querySelector(`#check${index}`).checked));\n      });\n      arrayBoolean.forEach((elt, index)=>{\n        if(elt == true){\n          if(cordX == undefined){\n            cordX = index;\n          }\n          else{\n            cordY = index;\n          }\n        }\n      });\n      let x = checkbox[cordX];\n      let y = checkbox[cordY];\n      arrayFinale[0].forEach((elt, index)=>{\n        if(elt == x){\n          cordX = index;\n        }\n        if(elt == y){\n          cordY = index;\n        }\n      });\n      dataForD3(cordX, cordY, x, y);\n    }\n  \n  \n    function dataForD3(x, y, nameX, nameY){\n      console.log(\"aa\",arrayFinale);\n      arrayFinale = deleteEmpty(arrayFinale);\n      let arrayD3 = [];\n      arrayFinale.forEach((elt, index) =>{\n        let arrayTemp = [];\n        arrayTemp.push(arrayFinale[index][cordX]);\n        arrayTemp.push(arrayFinale[index][cordY]);\n        arrayD3.push(arrayTemp);\n      });\n      arrayD3 = trasformaArray(arrayD3);\n      console.log(arrayD3);\n      d3Construct(arrayD3, nameX, nameY);\n    }\n  \n  \n  }\n  \n  function deleteEmpty(array){\n    let localArray = [];\n    array.forEach((item, i) => {\n      if(item == 0) {}\n      else {\n        localArray.push(item);\n      }\n    });\n    return localArray;\n  }\n  \n  \n  \n  //--------------------------------------------DRUID-------------------------------------------------------------------\n  \n  function druid(data){\n    data = transformArray(data);\n    data = trasformaArray(data);\n    data.pop();//SISTEMARE\n    const attrs = Object.keys(data[0]).filter(\n      a => {\n        console.log(typeof data[0][a]);\n        return (typeof data[0][a] === \"number\");\n      }\n    );\n    const maxes = attrs.map(a => {\n      return d3.max(data, d => d[a]);\n    });\n  \n    console.log(maxes);\n  \n    let a = data.map(d => attrs.map((a, i) => d[a] / maxes[i]));\n    console.log(\"a\",a);\n  \n    let projection = new druid.PCA(a).transform();//transformate in 2 colonne\n  \n  \n    projection = formatArray(projection);\n    console.log(\"pro\",projection);\n    d3Construct(projection, \"x\", \"y\");\n  }\n  \n  function formatArray(projection){\n      let headers = [\"x\", \"y\"];\n      let arrayModificato = projection.map(function (row) {\n        const el = headers.reduce(function (object, header, index) {\n          object[header] = row[index];\n          return object;\n        }, {});\n        return el;\n      });\n      return arrayModificato;\n    }\n  \n  function min(data, nameX){\n    let min = data[0][nameX];\n    data.forEach((item, i) => {\n      if(item[nameX] < min){\n        min = item[nameX];\n      }\n    });\n    console.log(min);\n    return min;\n  }\n  \n  function max(data, nameX){\n    let max = data[0][nameX];\n    data.forEach((item, i) => {\n      if(item[nameX] > max){\n        max = item[nameX];\n      }\n    });\n    console.log(max);\n    return max;\n  }\n  \n  \n  //--------------------------------------------D3, PLOT CSV-------------------------------------------------------------------\n  \n  \n  function d3Construct(data, nameX, nameY){\n  \n    console.log(\"data\", data);\n    console.log(\"x\", nameX);\n    console.log(\"y\", nameY);\n  \n    document.querySelector(\"#contenitoreForm\").style.display = \"none\";\n    document.querySelector(\"#my_dataviz\").style.display = \"block\";\n  \n  \n    const margin = {top: 10, right: 30, bottom: 30, left: 60},\n    width = 460 - margin.left - margin.right,\n    height = 400 - margin.top - margin.bottom;\n  \n    // append the svg object to the body of the page\n    const svg = d3.select(\"#my_dataviz\")\n    .append(\"svg\")\n    .attr(\"width\", width + margin.left + margin.right)\n    .attr(\"height\", height + margin.top + margin.bottom)\n    .append(\"g\")\n    .attr(\"transform\", `translate(${margin.left}, ${margin.top})`);\n  \n    create();\n    //Read the data\n    function create(){\n  \n      // Add X axis\n      const x = d3.scaleLinear()\n      .domain([min(data, nameX), max(data, nameX)])\n      .range([ 0, width ]);\n      svg.append(\"g\")\n      .attr(\"transform\", `translate(0, ${height})`)\n      .call(d3.axisBottom(x));\n  \n      // Add Y axis\n      const y = d3.scaleLinear()\n      .domain([min(data, nameY), max(data, nameY)])\n      .range([ height, 0]);\n      svg.append(\"g\")\n      .call(d3.axisLeft(y));\n  \n      // Add dots\n      svg.append('g')\n      .selectAll(\"dot\")\n      .data(data)\n      .join(\"circle\")\n      .attr(\"cx\", function (d) { return x(d[nameX]); } )\n      .attr(\"cy\", function (d) { return y(d[nameY]); } )\n      .attr(\"r\", 3.5)\n      .style(\"fill\", \"#69b3a2\");\n  \n    }\n  }\n"]},"metadata":{},"sourceType":"module"}