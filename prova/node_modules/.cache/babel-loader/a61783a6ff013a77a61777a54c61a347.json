{"ast":null,"code":"import * as d3 from 'd3';\nexport let arrayFinale;\nlet checkbox = []; //----------------------ELABORAZIONE MANUALE----------------------\n\n/*\nfunction buttonElaborate(){\n  const input = document.getElementById(\"csvFile\");\n  const file = input.files[0];\n  document.querySelector(\"#bottone-input-druid\").style.display = \"none\";\n\n  const reader = new FileReader();\n\n  reader.onload = function (e) {\n    const text = e.target.result;//stringa con tutto il risultato del file CSV\n    const data = csvToArray(text);\n    arrayFinale = transformArray(data);\n    manipulationDom();\n  };\n\n  reader.readAsText(file);\n}\n\n //----------------------ELABORAZIONE AI CON DRUID----------------------\nfunction buttonElaborateDruid(){\n  const input = document.getElementById(\"csvFile\");\n  const file = input.files[0];\n\n  const reader = new FileReader();\n\n  reader.onload = function (e) {\n    const text = e.target.result;//stringa con tutto il risultato del file CSV\n    const data = csvToArray(text);\n    druid(data);\n  };\n\n  reader.readAsText(file);\n}\n\n*/\n\nfunction isNumeric(n) {\n  return !isNaN(n);\n} // per fare qualcosa ai dati numerici\n\n\nexport function transformArray(data) {\n  data.forEach((elt, index) => {\n    // scorre le righe\n    if (index != 0) {\n      // salta la prima riga con le etichette\n      for (const key in data[index]) {\n        if (isNumeric(data[index][key])) data[index][key] = Number(data[index][key]);\n      }\n      /* Array.from(elt).forEach((elt2,index2) =>{ // scorre le colonne\n        if(isNumeric(elt2)){\n          data[index][index2] = Number(elt2); //che cacchio serve?\n        }\n      }); */\n\n    }\n  });\n  return data;\n}\nexport function manipulationDom(data) {\n  let riga = data[1];\n  document.querySelector(\"#csvFile\").style.display = \"none\"; //toglie la form per inserire il csv\n\n  document.querySelector(\"#bottone_elab\").style.display = \"none\"; //toglie il bottone per elaborare\n\n  for (const key in riga) {\n    //console.log(key, ' : ', riga[key]);\n    if (isNumeric(riga[key])) {\n      checkbox.push(key);\n    }\n  }\n\n  console.log(checkbox); //creare i checkbox\n\n  createCheckBox(checkbox);\n  fine(data);\n}\n\nfunction createCheckBox(checkbox) {\n  var parentElement = document.querySelector('#myForm');\n  let counter = 0;\n  let spazio = document.createElement('br');\n\n  for (var count in checkbox) {\n    var newCheckBox = document.createElement('input');\n    newCheckBox.type = 'checkbox';\n    newCheckBox.id = 'check' + count; // need unique Ids!\n\n    let spazio = document.createElement('br');\n    var newLabel = document.createElement('label');\n    newLabel.innerHTML = checkbox[count];\n    parentElement.appendChild(spazio);\n    parentElement.appendChild(newCheckBox);\n    parentElement.appendChild(newLabel);\n    counter++;\n  }\n\n  parentElement.appendChild(spazio);\n  var newButton = document.createElement('button');\n  newButton.innerHTML = \"Calcola\";\n  newButton.id = \"bottoneCalcoloFinale\";\n  newButton.classList.add(\"button\");\n  newButton.style.marginTop = \"10px\";\n  newButton.type = \"button\";\n  parentElement.appendChild(newButton);\n} // toglie la prima riga\n\n\nfunction trasformaArray(array) {\n  let headers = array.shift();\n  /* let arrayModificato = array.map(function (row) {\n    const el = headers.reduce(function (object, header, index) {\n      object[header] = row[index];\n      return object;\n    }, {});\n    return el;\n  }); */\n  //return arrayModificato;\n\n  return array;\n}\n\nfunction fine(data) {\n  let arrayBoolean = [];\n  let cordX;\n  let cordY;\n  let x;\n  let y;\n\n  document.querySelector(\"#bottoneCalcoloFinale\").onclick = function () {\n    //controlla i 2 check\n    checkbox.forEach((elt, index) => {\n      arrayBoolean.push(document.querySelector(`#check${index}`).checked);\n    });\n    arrayBoolean.forEach((elt, index) => {\n      if (elt == true) {\n        if (cordX == undefined) {\n          cordX = index;\n        } else {\n          cordY = index;\n        }\n      }\n    });\n    let x = checkbox[cordX];\n    let y = checkbox[cordY];\n    data[0].forEach((elt, index) => {\n      if (elt == x) {\n        cordX = index;\n      }\n\n      if (elt == y) {\n        cordY = index;\n      }\n    });\n    arrayD3, nameX, nameY = dataForD3(cordX, cordY, x, y, data);\n    console.log(arrayD3, nameX, nameY);\n  }; //crea un array di punti\n\n\n  function dataForD3(x, y, nameX, nameY, data) {\n    console.log(\"aa\", data);\n    data = deleteEmpty(data);\n    let arrayD3 = [];\n    data.forEach((elt, index) => {\n      let arrayTemp = [];\n      arrayTemp.push(data[index][nameX]);\n      arrayTemp.push(data[index][nameY]);\n      arrayD3.push(arrayTemp);\n    });\n    console.log(\"arrayD3\", arrayD3); // per togliere la prima riga\n\n    arrayD3 = trasformaArray(arrayD3);\n    return arrayD3, nameX, nameY; //d3Construct(arrayD3, nameX, nameY);\n  }\n}\n\nfunction deleteEmpty(array) {\n  let localArray = [];\n  array.forEach((item, i) => {\n    if (item == 0) {} else {\n      localArray.push(item);\n    }\n  });\n  return localArray;\n} //--------------------------------------------DRUID-------------------------------------------------------------------\n\n\nfunction druid(data) {\n  data = transformArray(data);\n  data = trasformaArray(data);\n  data.pop(); //SISTEMARE\n\n  const attrs = Object.keys(data[0]).filter(a => {\n    console.log(typeof data[0][a]);\n    return typeof data[0][a] === \"number\";\n  });\n  const maxes = attrs.map(a => {\n    return d3.max(data, d => d[a]);\n  });\n  console.log(maxes);\n  let a = data.map(d => attrs.map((a, i) => d[a] / maxes[i]));\n  console.log(\"a\", a);\n  let projection = new druid.PCA(a).transform(); //transformate in 2 colonne\n\n  projection = formatArray(projection);\n  console.log(\"pro\", projection);\n  d3Construct(projection, \"x\", \"y\");\n}\n\nfunction formatArray(projection) {\n  let headers = [\"x\", \"y\"];\n  let arrayModificato = projection.map(function (row) {\n    const el = headers.reduce(function (object, header, index) {\n      object[header] = row[index];\n      return object;\n    }, {});\n    return el;\n  });\n  return arrayModificato;\n}\n\nfunction min(data, nameX) {\n  let min = data[0][nameX];\n  data.forEach((item, i) => {\n    if (item[nameX] < min) {\n      min = item[nameX];\n    }\n  });\n  console.log(min);\n  return min;\n}\n\nfunction max(data, nameX) {\n  let max = data[0][nameX];\n  data.forEach((item, i) => {\n    if (item[nameX] > max) {\n      max = item[nameX];\n    }\n  });\n  console.log(max);\n  return max;\n} //--------------------------------------------D3, PLOT CSV-------------------------------------------------------------------\n\n\nfunction d3Construct(data, nameX, nameY) {\n  console.log(\"data\", data);\n  console.log(\"x\", nameX);\n  console.log(\"y\", nameY);\n  document.querySelector(\"#contenitoreForm\").style.display = \"none\";\n  document.querySelector(\"#my_dataviz\").style.display = \"block\";\n  const margin = {\n    top: 10,\n    right: 30,\n    bottom: 30,\n    left: 60\n  },\n        width = 460 - margin.left - margin.right,\n        height = 400 - margin.top - margin.bottom; // append the svg object to the body of the page\n\n  const svg = d3.select(\"#my_dataviz\").append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", `translate(${margin.left}, ${margin.top})`);\n  create(); //Read the data\n\n  function create() {\n    // Add X axis\n    const x = d3.scaleLinear().domain([min(data, nameX), max(data, nameX)]).range([0, width]);\n    svg.append(\"g\").attr(\"transform\", `translate(0, ${height})`).call(d3.axisBottom(x)); // Add Y axis\n\n    const y = d3.scaleLinear().domain([min(data, nameY), max(data, nameY)]).range([height, 0]);\n    svg.append(\"g\").call(d3.axisLeft(y)); // Add dots\n\n    svg.append('g').selectAll(\"dot\").data(data).join(\"circle\").attr(\"cx\", function (d) {\n      return x(d[nameX]);\n    }).attr(\"cy\", function (d) {\n      return y(d[nameY]);\n    }).attr(\"r\", 3.5).style(\"fill\", \"#69b3a2\");\n  }\n}","map":{"version":3,"sources":["/home/nicla/Scrivania/SWE/prova/src/control.js"],"names":["d3","arrayFinale","checkbox","isNumeric","n","isNaN","transformArray","data","forEach","elt","index","key","Number","manipulationDom","riga","document","querySelector","style","display","push","console","log","createCheckBox","fine","parentElement","counter","spazio","createElement","count","newCheckBox","type","id","newLabel","innerHTML","appendChild","newButton","classList","add","marginTop","trasformaArray","array","headers","shift","arrayBoolean","cordX","cordY","x","y","onclick","checked","undefined","arrayD3","nameX","nameY","dataForD3","deleteEmpty","arrayTemp","localArray","item","i","druid","pop","attrs","Object","keys","filter","a","maxes","map","max","d","projection","PCA","transform","formatArray","d3Construct","arrayModificato","row","el","reduce","object","header","min","margin","top","right","bottom","left","width","height","svg","select","append","attr","create","scaleLinear","domain","range","call","axisBottom","axisLeft","selectAll","join"],"mappings":"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","sourcesContent":["import * as d3 from 'd3';\n\n  export let arrayFinale;\n  let checkbox = [];\n  \n\n  \n  \n  //----------------------ELABORAZIONE MANUALE----------------------\n  /*\n  function buttonElaborate(){\n    const input = document.getElementById(\"csvFile\");\n    const file = input.files[0];\n    document.querySelector(\"#bottone-input-druid\").style.display = \"none\";\n  \n    const reader = new FileReader();\n  \n    reader.onload = function (e) {\n      const text = e.target.result;//stringa con tutto il risultato del file CSV\n      const data = csvToArray(text);\n      arrayFinale = transformArray(data);\n      manipulationDom();\n    };\n  \n    reader.readAsText(file);\n  }\n  \n\n  //----------------------ELABORAZIONE AI CON DRUID----------------------\n  function buttonElaborateDruid(){\n    const input = document.getElementById(\"csvFile\");\n    const file = input.files[0];\n  \n    const reader = new FileReader();\n  \n    reader.onload = function (e) {\n      const text = e.target.result;//stringa con tutto il risultato del file CSV\n      const data = csvToArray(text);\n      druid(data);\n    };\n  \n    reader.readAsText(file);\n  }\n  \n */\n  \n  function isNumeric(n) { return !isNaN(n); }\n  \n  // per fare qualcosa ai dati numerici\n  export function transformArray(data){\n    data.forEach((elt, index) =>{ // scorre le righe\n      if(index != 0){ // salta la prima riga con le etichette\n        for(const key in data[index]) {\n          if(isNumeric(data[index][key]))\n            data[index][key]=Number(data[index][key]);\n        }\n\n        /* Array.from(elt).forEach((elt2,index2) =>{ // scorre le colonne\n          if(isNumeric(elt2)){\n            data[index][index2] = Number(elt2); //che cacchio serve?\n          }\n        }); */\n      }\n    });\n    return data;\n  }\n  \n  \n  export function manipulationDom(data){\n    let riga=data[1];\n\n    document.querySelector(\"#csvFile\").style.display = \"none\"; //toglie la form per inserire il csv\n    document.querySelector(\"#bottone_elab\").style.display = \"none\"; //toglie il bottone per elaborare\n    \n\n    for (const key in riga) {\n      //console.log(key, ' : ', riga[key]);\n      if(isNumeric(riga[key])){\n        checkbox.push(key);\n      }\n    }\n\n    console.log(checkbox);\n\n    //creare i checkbox\n    createCheckBox(checkbox);\n  \n    fine(data);\n  }\n  \n\n  function createCheckBox(checkbox){ \n  \n    var parentElement = document.querySelector('#myForm');\n    let counter = 0;\n    let spazio = document.createElement('br');\n  \n    for(var count in checkbox)\n    {\n      var newCheckBox = document.createElement('input');\n      newCheckBox.type = 'checkbox';\n      newCheckBox.id = 'check' + count; // need unique Ids!\n  \n      let spazio = document.createElement('br');\n  \n      var newLabel = document.createElement('label');\n      newLabel.innerHTML = checkbox[count];\n  \n      parentElement.appendChild(spazio);\n      parentElement.appendChild(newCheckBox);\n      parentElement.appendChild(newLabel);\n      counter++;\n    }\n  \n    parentElement.appendChild(spazio);\n    var newButton = document.createElement('button');\n    newButton.innerHTML = \"Calcola\";\n    newButton.id = \"bottoneCalcoloFinale\";\n    newButton.classList.add(\"button\");\n    newButton.style.marginTop = \"10px\";\n    newButton.type = \"button\";\n    parentElement.appendChild(newButton);\n  }\n  \n\n  // toglie la prima riga\n  function trasformaArray(array){\n    let headers = array.shift(); \n    /* let arrayModificato = array.map(function (row) {\n      const el = headers.reduce(function (object, header, index) {\n        object[header] = row[index];\n        return object;\n      }, {});\n      return el;\n    }); */\n    \n    //return arrayModificato;\n    return array;\n  }\n  \n  function fine(data){\n    let arrayBoolean = [];\n    let cordX;let cordY;\n    let x;let y;\n    document.querySelector(\"#bottoneCalcoloFinale\").onclick = function(){\n      //controlla i 2 check\n      checkbox.forEach((elt, index)=>{\n        arrayBoolean.push((document.querySelector(`#check${index}`).checked));\n      });\n      arrayBoolean.forEach((elt, index)=>{\n        if(elt == true){\n          if(cordX == undefined){\n            cordX = index;\n          }\n          else{\n            cordY = index;\n          }\n        }\n      });\n      let x = checkbox[cordX];\n      let y = checkbox[cordY];\n      data[0].forEach((elt, index)=>{\n        if(elt == x){\n          cordX = index;\n        }\n        if(elt == y){\n          cordY = index;\n        }\n      });\n      arrayD3, nameX, nameY = dataForD3(cordX, cordY, x, y, data);\n      console.log(arrayD3, nameX, nameY);\n    }\n  \n    \n    //crea un array di punti\n    function dataForD3(x, y, nameX, nameY, data){\n      console.log(\"aa\",data);\n      data = deleteEmpty(data); \n      \n      let arrayD3 = [];\n      data.forEach((elt, index) =>{\n        let arrayTemp = [];\n        arrayTemp.push(data[index][nameX]);\n        arrayTemp.push(data[index][nameY]);\n        arrayD3.push(arrayTemp);\n      });\n\n      console.log(\"arrayD3\", arrayD3);\n      // per togliere la prima riga\n      arrayD3 = trasformaArray(arrayD3);\n      \n      return arrayD3, nameX, nameY;\n      //d3Construct(arrayD3, nameX, nameY);\n    }\n  \n  \n  }\n  \n  function deleteEmpty(array){\n    let localArray = [];\n    array.forEach((item, i) => {\n      if(item == 0) {}\n      else {\n        localArray.push(item);\n      }\n    });\n    return localArray;\n  }\n  \n  \n  \n  //--------------------------------------------DRUID-------------------------------------------------------------------\n  \n  function druid(data){\n    data = transformArray(data);\n    data = trasformaArray(data);\n    data.pop();//SISTEMARE\n    const attrs = Object.keys(data[0]).filter(\n      a => {\n        console.log(typeof data[0][a]);\n        return (typeof data[0][a] === \"number\");\n      }\n    );\n    const maxes = attrs.map(a => {\n      return d3.max(data, d => d[a]);\n    });\n  \n    console.log(maxes);\n  \n    let a = data.map(d => attrs.map((a, i) => d[a] / maxes[i]));\n    console.log(\"a\",a);\n  \n    let projection = new druid.PCA(a).transform();//transformate in 2 colonne\n  \n  \n    projection = formatArray(projection);\n    console.log(\"pro\",projection);\n    d3Construct(projection, \"x\", \"y\");\n  }\n  \n  function formatArray(projection){\n      let headers = [\"x\", \"y\"];\n      let arrayModificato = projection.map(function (row) {\n        const el = headers.reduce(function (object, header, index) {\n          object[header] = row[index];\n          return object;\n        }, {});\n        return el;\n      });\n      return arrayModificato;\n    }\n  \n  function min(data, nameX){\n    let min = data[0][nameX];\n    data.forEach((item, i) => {\n      if(item[nameX] < min){\n        min = item[nameX];\n      }\n    });\n    console.log(min);\n    return min;\n  }\n  \n  function max(data, nameX){\n    let max = data[0][nameX];\n    data.forEach((item, i) => {\n      if(item[nameX] > max){\n        max = item[nameX];\n      }\n    });\n    console.log(max);\n    return max;\n  }\n  \n  \n  //--------------------------------------------D3, PLOT CSV-------------------------------------------------------------------\n  \n  \n  function d3Construct(data, nameX, nameY){\n  \n    console.log(\"data\", data);\n    console.log(\"x\", nameX);\n    console.log(\"y\", nameY);\n  \n    document.querySelector(\"#contenitoreForm\").style.display = \"none\";\n    document.querySelector(\"#my_dataviz\").style.display = \"block\";\n  \n  \n    const margin = {top: 10, right: 30, bottom: 30, left: 60},\n    width = 460 - margin.left - margin.right,\n    height = 400 - margin.top - margin.bottom;\n  \n    // append the svg object to the body of the page\n    const svg = d3.select(\"#my_dataviz\")\n    .append(\"svg\")\n    .attr(\"width\", width + margin.left + margin.right)\n    .attr(\"height\", height + margin.top + margin.bottom)\n    .append(\"g\")\n    .attr(\"transform\", `translate(${margin.left}, ${margin.top})`);\n  \n    create();\n    //Read the data\n    function create(){\n  \n      // Add X axis\n      const x = d3.scaleLinear()\n      .domain([min(data, nameX), max(data, nameX)])\n      .range([ 0, width ]);\n      svg.append(\"g\")\n      .attr(\"transform\", `translate(0, ${height})`)\n      .call(d3.axisBottom(x));\n  \n      // Add Y axis\n      const y = d3.scaleLinear()\n      .domain([min(data, nameY), max(data, nameY)])\n      .range([ height, 0]);\n      svg.append(\"g\")\n      .call(d3.axisLeft(y));\n  \n      // Add dots\n      svg.append('g')\n      .selectAll(\"dot\")\n      .data(data)\n      .join(\"circle\")\n      .attr(\"cx\", function (d) { return x(d[nameX]); } )\n      .attr(\"cy\", function (d) { return y(d[nameY]); } )\n      .attr(\"r\", 3.5)\n      .style(\"fill\", \"#69b3a2\");\n  \n    }\n  }\n"]},"metadata":{},"sourceType":"module"}